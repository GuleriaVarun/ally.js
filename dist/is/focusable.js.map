{"version":3,"sources":["../../src/is/focusable.js"],"names":["supports","isOnlyFocusRelevant","element","nodeName","toLowerCase","_tabindex","shadowRoot","focusLabelTabindex","focusSvgFocusableAttribute","ownerSVGElement","focusableAttribute","getAttribute","hasAttribute","focusImgUsemapTabindex","isFocusableRules","context","except","disabled","visible","onlyTabbable","_isOnlyTabbable","isOnlyTabbable","rules","onlyFocusableBrowsingContext","label","resolveDocument","focusRelevant","isFocusRelevant","visibilityOptions","focusInHiddenIframe","browsingContext","focusObjectSvgHidden","cssVisibility","isVisible","frameElement","_nodeName","focusInZeroDimensionObject","offsetWidth","offsetHeight","focusSvgInIframe","isFocusable"],"mappings":"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","file":"focusable.js","sourcesContent":["\r\n// determine if an element can be focused\r\n\r\n// https://www.w3.org/TR/html5/editing.html#focus-management\r\n\r\n// NOTE: The following known issues exist:\r\n//   Gecko: `svg a[xlink|href]` is not identified as focusable (because SVGElement.prototype.focus is missing)\r\n//   Blink, WebKit: SVGElements that have been made focusable by adding a focus event listener are not identified as focusable\r\n\r\nimport isFocusRelevant from './focus-relevant';\r\nimport isValidArea from './valid-area';\r\nimport isVisible from './visible';\r\nimport isDisabled from './disabled';\r\nimport isOnlyTabbable from './only-tabbable';\r\nimport contextToElement from '../util/context-to-element';\r\nimport getFrameElement from '../util/get-frame-element';\r\nimport tabindexValue from '../util/tabindex-value';\r\n\r\nimport _supports from '../supports/supports';\r\nlet supports;\r\n\r\nfunction isOnlyFocusRelevant(element) {\r\n  const nodeName = element.nodeName.toLowerCase();\r\n  if (nodeName === 'embed' || nodeName === 'keygen') {\r\n    // embed is considered focus-relevant but not focusable\r\n    // see https://github.com/medialize/ally.js/issues/82\r\n    return true;\r\n  }\r\n\r\n  const _tabindex = tabindexValue(element);\r\n  if (element.shadowRoot && _tabindex === null) {\r\n    // ShadowDOM host elements *may* receive focus\r\n    // even though they are not considered focuable\r\n    return true;\r\n  }\r\n\r\n  if (nodeName === 'label') {\r\n    // <label tabindex=\"0\"> is only tabbable in Firefox, not script-focusable\r\n    // there's no way to make an element focusable other than by adding a tabindex,\r\n    // and focus behavior of the label element seems hard-wired to ignore tabindex\r\n    // in some browsers (like Gecko, Blink and WebKit)\r\n    return !supports.focusLabelTabindex || _tabindex === null;\r\n  }\r\n\r\n  if (nodeName === 'legend') {\r\n    return _tabindex === null;\r\n  }\r\n\r\n  if (supports.focusSvgFocusableAttribute && (element.ownerSVGElement || nodeName === 'svg')) {\r\n    // Internet Explorer understands the focusable attribute introduced in SVG Tiny 1.2\r\n    const focusableAttribute = element.getAttribute('focusable');\r\n    return focusableAttribute && focusableAttribute === 'false';\r\n  }\r\n\r\n  if (nodeName === 'img' && element.hasAttribute('usemap')) {\r\n    // Gecko, Trident and Edge do not allow an image with an image map and tabindex to be focused,\r\n    // it appears the tabindex is overruled so focus is still forwarded to the <map>\r\n    return _tabindex === null || !supports.focusImgUsemapTabindex;\r\n  }\r\n\r\n  if (nodeName === 'area') {\r\n    // all <area>s are considered relevant,\r\n    // but only the valid <area>s are focusable\r\n    return !isValidArea(element);\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction isFocusableRules({\r\n  context,\r\n  except = {\r\n    disabled: false,\r\n    visible: false,\r\n    onlyTabbable: false,\r\n  },\r\n} = {}) {\r\n  if (!supports) {\r\n    supports = _supports();\r\n  }\r\n\r\n  const _isOnlyTabbable = isOnlyTabbable.rules.except({\r\n    onlyFocusableBrowsingContext: true,\r\n    visible: except.visible,\r\n  });\r\n\r\n  const element = contextToElement({\r\n    label: 'is/focusable',\r\n    resolveDocument: true,\r\n    context,\r\n  });\r\n\r\n  const focusRelevant = isFocusRelevant.rules({\r\n    context: element,\r\n    except,\r\n  });\r\n\r\n  if (!focusRelevant || isOnlyFocusRelevant(element)) {\r\n    return false;\r\n  }\r\n\r\n  if (!except.disabled && isDisabled(element)) {\r\n    return false;\r\n  }\r\n\r\n  if (!except.onlyTabbable && _isOnlyTabbable(element)) {\r\n    // some elements may be keyboard focusable, but not script focusable\r\n    return false;\r\n  }\r\n\r\n  // elements that are not rendered, cannot be focused\r\n  if (!except.visible) {\r\n    const visibilityOptions = {\r\n      context: element,\r\n      except: {},\r\n    };\r\n\r\n    if (supports.focusInHiddenIframe) {\r\n      // WebKit and Blink can focus content in hidden <iframe> and <object>\r\n      visibilityOptions.except.browsingContext = true;\r\n    }\r\n\r\n    if (supports.focusObjectSvgHidden) {\r\n      // Blink allows focusing the object element, even if it has visibility: hidden;\r\n      // @browser-issue Blink https://code.google.com/p/chromium/issues/detail?id=586191\r\n      const nodeName = element.nodeName.toLowerCase();\r\n      if (nodeName === 'object') {\r\n        visibilityOptions.except.cssVisibility = true;\r\n      }\r\n    }\r\n\r\n    if (!isVisible.rules(visibilityOptions)) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  const frameElement = getFrameElement(element);\r\n  if (frameElement) {\r\n    const _nodeName = frameElement.nodeName.toLowerCase();\r\n    if (_nodeName === 'object' && !supports.focusInZeroDimensionObject) {\r\n      if (!frameElement.offsetWidth || !frameElement.offsetHeight) {\r\n        // WebKit can not focus content in <object> if it doesn't have dimensions\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  const nodeName = element.nodeName.toLowerCase();\r\n  if (nodeName === 'svg' && supports.focusSvgInIframe && !frameElement && element.getAttribute('tabindex') === null) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n// bind exceptions to an iterator callback\r\nisFocusableRules.except = function(except = {}) {\r\n  const isFocusable = function(context) {\r\n    return isFocusableRules({\r\n      context,\r\n      except,\r\n    });\r\n  };\r\n\r\n  isFocusable.rules = isFocusableRules;\r\n  return isFocusable;\r\n};\r\n\r\n// provide isFocusRelevant(context) as default iterator callback\r\nconst isFocusable = isFocusableRules.except({});\r\nexport default isFocusable;\r\n"]}