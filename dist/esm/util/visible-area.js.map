{"version":3,"sources":["../../src/util/visible-area.js"],"names":["getParents","getIntersectingRect","one","two","top","Math","max","left","right","min","bottom","width","height","getViewportRect","window","innerWidth","document","documentElement","clientWidth","innerHeight","clientHeight","getInnerBoundingClientRect","element","rect","getBoundingClientRect","scrollbarWidth","offsetWidth","scrollbarHeight","offsetHeight","_rect","area","isOverflowingElement","style","getComputedStyle","value","getPropertyValue","isScrollableElement","scrollHeight","scrollWidth","getScrollableParentRect","scrollingContainers","context","slice","filter","length","reduce","previous","current","intersection","_element","_viewport","_area","_container","_visible","maxArea","visibleArea","round","factor","roundedVisibleArea"],"mappings":"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","file":"visible-area.js","sourcesContent":["\r\nimport getParents from '../get/parents';\r\n\r\nfunction getIntersectingRect(one, two) {\r\n  // identify the rectangle that _element and _container overlap in\r\n  const top = Math.max(one.top, two.top);\r\n  const left = Math.max(one.left, two.left);\r\n  // make sure bottom can't be above top, right can't be before left\r\n  const right = Math.max(Math.min(one.right, two.right), left);\r\n  const bottom = Math.max(Math.min(one.bottom, two.bottom), top);\r\n  // return something resembling ClientRect\r\n  return {\r\n    top: top,\r\n    right: right,\r\n    bottom: bottom,\r\n    left: left,\r\n    width: right - left,\r\n    height: bottom - top,\r\n  };\r\n}\r\n\r\nfunction getViewportRect() {\r\n  const width = window.innerWidth || document.documentElement.clientWidth;\r\n  const height = window.innerHeight || document.documentElement.clientHeight;\r\n  // return something resembling ClientRect\r\n  return {\r\n    top: 0,\r\n    right: width,\r\n    bottom: height,\r\n    left: 0,\r\n    width: width,\r\n    height: height,\r\n  };\r\n}\r\n\r\nfunction getInnerBoundingClientRect(element) {\r\n  // convenience for the .reduce() in getScrollableParentRect()\r\n  const rect = element.getBoundingClientRect();\r\n\r\n  // remove the width of the scrollbar because that\r\n  // area is not really considered visible\r\n  // NOTE: assuming scrollbar is always to the right and bottom\r\n  const scrollbarWidth = element.offsetWidth - element.clientWidth;\r\n  const scrollbarHeight = element.offsetHeight - element.clientHeight;\r\n  // cannot mutate rect because it has readonly properties\r\n  const _rect = {\r\n    top: rect.top,\r\n    left: rect.left,\r\n    right: rect.right - scrollbarWidth,\r\n    bottom: rect.bottom - scrollbarHeight,\r\n    width: rect.width - scrollbarWidth,\r\n    height: rect.height - scrollbarHeight,\r\n    area: 0,\r\n  };\r\n\r\n  _rect.area = _rect.width * _rect.height;\r\n  return _rect;\r\n}\r\n\r\nfunction isOverflowingElement(element) {\r\n  const style = window.getComputedStyle(element, null);\r\n  const value = 'visible';\r\n  return style.getPropertyValue('overflow-x') !== value\r\n    && style.getPropertyValue('overflow-y') !== value;\r\n}\r\n\r\nfunction isScrollableElement(element) {\r\n  // an element not scrollable if it doesn't crop its content\r\n  if (!isOverflowingElement(element)) {\r\n    return false;\r\n  }\r\n\r\n  // an element is scrollable when it is smaller than its content\r\n  return element.offsetHeight < element.scrollHeight\r\n    || element.offsetWidth < element.scrollWidth;\r\n}\r\n\r\nfunction getScrollableParentRect(element) {\r\n  // get largest possible space constrained by scrolling containers\r\n\r\n  // find scrollable parents\r\n  const scrollingContainers = getParents({context: element}).slice(1).filter(isScrollableElement);\r\n\r\n  if (!scrollingContainers.length) {\r\n    // no containers, no joy\r\n    return null;\r\n  }\r\n\r\n  // identify the currently visible intersection of all scrolling container parents\r\n  return scrollingContainers.reduce(function(previous, current) {\r\n    const rect = getInnerBoundingClientRect(current);\r\n    const intersection = getIntersectingRect(rect, previous);\r\n    // identify the smallest scrolling container so we know how much space\r\n    // our element can fill at the most - note that this is NOT the area\r\n    // of the intersection, intersection is just abused as a vehicle\r\n    intersection.area = Math.min(rect.area, previous.area);\r\n    return intersection;\r\n  }, getInnerBoundingClientRect(scrollingContainers[0]));\r\n}\r\n\r\nexport default function(element) {\r\n  // dimensions of the element itself\r\n  const _element = element.getBoundingClientRect();\r\n  // dimensions of the viewport\r\n  const _viewport = getViewportRect();\r\n  // we need the area to know how much of the element can be displayed at the most\r\n  _viewport.area = _viewport.width * _viewport.height;\r\n\r\n  let _area = _viewport;\r\n  // dimensions of the intersection of all scrollable parents\r\n  const _container = getScrollableParentRect(element);\r\n  if (_container) {\r\n    if (!_container.width || !_container.height) {\r\n      // scrollable containers without dimensions are invisible,\r\n      // meaning that the element is not visible at all\r\n      return 0;\r\n    }\r\n\r\n    // dimension the element can currently be rendered in\r\n    _area = getIntersectingRect(_container, _viewport);\r\n    _area.area = _container.area;\r\n  }\r\n\r\n  // dimension of the element currently rendered in identified space\r\n  const _visible = getIntersectingRect(_element, _area);\r\n  if (!_visible.width || !_visible.height) {\r\n    // element is not shown within the identified area\r\n    return 0;\r\n  }\r\n\r\n  // compare the element's currently visible size to the size it\r\n  // could take up at the most, being either the element's actual\r\n  // size, or the space theroetically made available if all\r\n  // scrollable parents are aligned properly\r\n  const area = _element.width * _element.height;\r\n  const maxArea = Math.min(area, _area.area);\r\n  // Firefox may return sub-pixel bounding client rect\r\n  const visibleArea = Math.round(_visible.width) * Math.round(_visible.height) / maxArea;\r\n  // Edge might not reach 0.5 exactly\r\n  const factor = 10000;\r\n  const roundedVisibleArea = Math.round(visibleArea * factor) / factor;\r\n  // clamp the value at 1\r\n  return Math.min(roundedVisibleArea, 1);\r\n}\r\n"]}