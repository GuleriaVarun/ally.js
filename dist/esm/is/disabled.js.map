{"version":3,"sources":["../../src/is/disabled.js"],"names":["contextToElement","getParents","isNativeDisabledSupported","_supports","supports","isDisabledFieldset","element","nodeName","toLowerCase","disabled","isDisabledForm","context","label","hasAttribute","parents","some","focusFormDisabled"],"mappings":";AACA;;AAEA,OAAOA,gBAAP,MAA6B,4BAA7B;AACA,OAAOC,UAAP,MAAuB,gBAAvB;AACA,OAAOC,yBAAP,MAAsC,6BAAtC;;AAEA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,IAAIC,iBAAJ;;AAEA,SAASC,kBAAT,CAA4BC,OAA5B,EAAqC;AACnC,MAAMC,WAAWD,QAAQC,QAAR,CAAiBC,WAAjB,EAAjB;AACA,SAAOD,aAAa,UAAb,IAA2BD,QAAQG,QAA1C;AACD;;AAED,SAASC,cAAT,CAAwBJ,OAAxB,EAAiC;AAC/B,MAAMC,WAAWD,QAAQC,QAAR,CAAiBC,WAAjB,EAAjB;AACA,SAAOD,aAAa,MAAb,IAAuBD,QAAQG,QAAtC;AACD;;AAED,eAAe,UAASE,OAAT,EAAkB;AAC/B,MAAI,CAACP,QAAL,EAAe;AACbA,eAAWD,WAAX;AACD;;AAED,MAAMG,UAAUN,iBAAiB;AAC/BY,WAAO,aADwB;AAE/BD;AAF+B,GAAjB,CAAhB;;AAKA,MAAIL,QAAQO,YAAR,CAAqB,oBAArB,CAAJ,EAAgD;AAC9C;AACA,WAAO,IAAP;AACD;;AAED,MAAI,CAACX,0BAA0BI,OAA1B,CAAL,EAAyC;AACvC;AACA,WAAO,KAAP;AACD;;AAED,MAAIA,QAAQG,QAAZ,EAAsB;AACpB;AACA,WAAO,IAAP;AACD;;AAED,MAAMK,UAAUb,WAAW,EAACU,SAASL,OAAV,EAAX,CAAhB;AACA,MAAIQ,QAAQC,IAAR,CAAaV,kBAAb,CAAJ,EAAsC;AACpC;AACA,WAAO,IAAP;AACD;;AAED,MAAI,CAACD,SAASY,iBAAV,IAA+BF,QAAQC,IAAR,CAAaL,cAAb,CAAnC,EAAiE;AAC/D;AACA,WAAO,IAAP;AACD;;AAED,SAAO,KAAP;AACD","file":"disabled.js","sourcesContent":["\r\n// Determine if an element is disabled (i.e. not editable)\r\n\r\nimport contextToElement from '../util/context-to-element';\r\nimport getParents from '../get/parents';\r\nimport isNativeDisabledSupported from './native-disabled-supported';\r\n\r\nimport _supports from '../supports/supports';\r\nlet supports;\r\n\r\nfunction isDisabledFieldset(element) {\r\n  const nodeName = element.nodeName.toLowerCase();\r\n  return nodeName === 'fieldset' && element.disabled;\r\n}\r\n\r\nfunction isDisabledForm(element) {\r\n  const nodeName = element.nodeName.toLowerCase();\r\n  return nodeName === 'form' && element.disabled;\r\n}\r\n\r\nexport default function(context) {\r\n  if (!supports) {\r\n    supports = _supports();\r\n  }\r\n\r\n  const element = contextToElement({\r\n    label: 'is/disabled',\r\n    context,\r\n  });\r\n\r\n  if (element.hasAttribute('data-ally-disabled')) {\r\n    // treat ally's element/disabled like the DOM native element.disabled\r\n    return true;\r\n  }\r\n\r\n  if (!isNativeDisabledSupported(element)) {\r\n    // non-form elements do not support the disabled attribute\r\n    return false;\r\n  }\r\n\r\n  if (element.disabled) {\r\n    // the element itself is disabled\r\n    return true;\r\n  }\r\n\r\n  const parents = getParents({context: element});\r\n  if (parents.some(isDisabledFieldset)) {\r\n    // a parental <fieldset> is disabld and inherits the state onto this element\r\n    return true;\r\n  }\r\n\r\n  if (!supports.focusFormDisabled && parents.some(isDisabledForm)) {\r\n    // a parental <form> is disabld and inherits the state onto this element\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n"]}