{"version":3,"sources":["../../src/is/tabbable.js"],"names":["isVisible","contextToElement","elementMatches","tabindexValue","focusRelevant","getFrameElement","platform","getImageOfArea","hasCssOverflowScroll","hasCssDisplayFlex","isScrollableContainer","isUserModifyWritable","_supports","supports","focusableElementsPattern","isTabbableRules","context","except","flexbox","scrollable","shadow","visible","onlyTabbable","element","label","resolveDocument","is","BLINK","ANDROID","majorVersion","frameElement","WEBKIT","IOS","frameNodeName","nodeName","toLowerCase","isFixedBlink","name","_tabindex","tabindex","EDGE","ownerSVGElement","hasTabbableTabindexOrNone","hasTabbableTabindex","hasAttribute","test","potentiallyTabbable","type","style","window","getComputedStyle","focus","focusSvgNegativeTabindexAttribute","focusSvgInIframe","TRIDENT","focusSvg","focusSvgTabindexAttribute","tabIndex","undefined","Boolean","GECKO","img","isFocusRelevantWithoutFlexbox","isTabbableWithoutFlexbox","parent","parentElement","parentNodeName","parentStyle","isTabbable","rules"],"mappings":";AACA;;AAEA,OAAOA,SAAP,MAAsB,WAAtB;AACA,OAAOC,gBAAP,MAA6B,4BAA7B;AACA,OAAOC,cAAP,MAA2B,yBAA3B;AACA,OAAOC,aAAP,MAA0B,wBAA1B;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,OAAOC,eAAP,MAA4B,2BAA5B;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,SAAQC,cAAR,QAA6B,mBAA7B;AACA,SACEC,oBADF,EAEEC,iBAFF,EAGEC,qBAHF,EAIEC,oBAJF,QAKO,WALP;;AAOA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,IAAIC,iBAAJ;;AAEA;AACA;AACA,IAAMC,2BAA2B,4BAAjC;;AAEA,SAASC,eAAT,GASQ;AAAA,iFAAJ,EAAI;AAAA,MARNC,OAQM,QARNA,OAQM;AAAA,yBAPNC,MAOM;AAAA,MAPNA,MAOM,+BAPG;AACPC,aAAS,KADF;AAEPC,gBAAY,KAFL;AAGPC,YAAQ,KAHD;AAIPC,aAAS,KAJF;AAKPC,kBAAc;AALP,GAOH;;AACN,MAAI,CAACT,QAAL,EAAe;AACbA,eAAWD,WAAX;AACD;;AAED,MAAMW,UAAUtB,iBAAiB;AAC/BuB,WAAO,aADwB;AAE/BC,qBAAiB,IAFc;AAG/BT;AAH+B,GAAjB,CAAhB;;AAMA,MAAIV,SAASoB,EAAT,CAAYC,KAAZ,IAAqBrB,SAASoB,EAAT,CAAYE,OAAjC,IAA4CtB,SAASuB,YAAT,GAAwB,EAAxE,EAA4E;AAC1E;AACA;AACA;AACA,WAAO,KAAP;AACD;;AAED,MAAMC,eAAezB,gBAAgBkB,OAAhB,CAArB;AACA,MAAIO,YAAJ,EAAkB;AAChB,QAAIxB,SAASoB,EAAT,CAAYK,MAAZ,IAAsBzB,SAASoB,EAAT,CAAYM,GAAtC,EAA2C;AACzC;AACA,aAAO,KAAP;AACD;;AAED;AACA;AACA,QAAI7B,cAAc2B,YAAd,IAA8B,CAAlC,EAAqC;AACnC,aAAO,KAAP;AACD;;AAED,QAAI,CAACb,OAAOI,OAAR,KAAoBf,SAASoB,EAAT,CAAYC,KAAZ,IAAqBrB,SAASoB,EAAT,CAAYK,MAArD,KAAgE,CAAC/B,UAAU8B,YAAV,CAArE,EAA8F;AAC5F;AACA,aAAO,KAAP;AACD;;AAED;AACA;AACA,QAAMG,gBAAgBH,aAAaI,QAAb,CAAsBC,WAAtB,EAAtB;AACA,QAAIF,kBAAkB,QAAtB,EAAgC;AAC9B,UAAMG,eAAgB9B,SAAS+B,IAAT,KAAkB,QAAlB,IAA8B/B,SAASuB,YAAT,IAAyB,EAAxD,IACfvB,SAAS+B,IAAT,KAAkB,OAAlB,IAA6B/B,SAASuB,YAAT,IAAyB,EAD5D;;AAGA,UAAIvB,SAASoB,EAAT,CAAYK,MAAZ,IAAuBzB,SAASoB,EAAT,CAAYC,KAAZ,IAAqB,CAACS,YAAjD,EAAgE;AAC9D,eAAO,KAAP;AACD;AACF;AACF;;AAED,MAAMF,WAAWX,QAAQW,QAAR,CAAiBC,WAAjB,EAAjB;AACA,MAAMG,YAAYnC,cAAcoB,OAAd,CAAlB;AACA,MAAMgB,WAAWD,cAAc,IAAd,GAAqB,IAArB,GAA4BA,aAAa,CAA1D;;AAEA,MAAIhC,SAASoB,EAAT,CAAYc,IAAZ,IAAoBlC,SAASuB,YAAT,IAAyB,EAA7C,IAAmDC,YAAnD,IAAmEP,QAAQkB,eAA3E,IAA8FH,YAAY,CAA9G,EAAiH;AAC/G;AACA;AACA,WAAO,IAAP;AACD;;AAED,MAAMI,4BAA4BH,aAAa,KAA/C;AACA,MAAMI,sBAAsBL,cAAc,IAAd,IAAsBA,aAAa,CAA/D;;AAEA;AACA;AACA,MAAIf,QAAQqB,YAAR,CAAqB,iBAArB,CAAJ,EAA6C;AAC3C;AACA,WAAOF,yBAAP;AACD;;AAED,MAAI5B,yBAAyB+B,IAAzB,CAA8BX,QAA9B,KAA2CK,aAAa,IAA5D,EAAkE;AAChE,WAAO,KAAP;AACD;;AAED,MAAIjC,SAASoB,EAAT,CAAYK,MAAZ,IAAsBzB,SAASoB,EAAT,CAAYM,GAAtC,EAA2C;AACzC;AACA;AACA,QAAIc,sBAAuBZ,aAAa,OAAb,IAAwBX,QAAQwB,IAAR,KAAiB,MAAzC,IAAmDxB,QAAQwB,IAAR,KAAiB,UAArE,IACrBb,aAAa,QADQ,IAErBA,aAAa,UAFQ,IAGrBX,QAAQqB,YAAR,CAAqB,iBAArB,CAHL;;AAKA,QAAI,CAACE,mBAAL,EAA0B;AACxB,UAAME,QAAQC,OAAOC,gBAAP,CAAwB3B,OAAxB,EAAiC,IAAjC,CAAd;AACAuB,4BAAsBnC,qBAAqBqC,KAArB,CAAtB;AACD;;AAED,QAAI,CAACF,mBAAL,EAA0B;AACxB,aAAO,KAAP;AACD;AACF;;AAED,MAAIZ,aAAa,KAAb,IAAsBI,cAAc,IAAxC,EAA8C;AAC5C,QAAIhC,SAASoB,EAAT,CAAYC,KAAZ,IAAqBrB,SAASoB,EAAT,CAAYK,MAAZ,IAAsBzB,SAASuB,YAAT,KAA0B,CAAzE,EAA4E;AAC1E;AACA,aAAO,IAAP;AACD;AACF;;AAED,MAAI3B,eAAeqB,OAAf,EAAwB,OAAxB,KAAoCA,QAAQqB,YAAR,CAAqB,YAArB,CAAxC,EAA4E;AAC1E,QAAIF,yBAAJ,EAA+B;AAC7B;AACA,aAAO,IAAP;AACD;;AAED,QAAInB,QAAQ4B,KAAR,IAAiB,CAACtC,SAASuC,iCAA/B,EAAkE;AAChE;AACA;AACA;AACA,aAAO,IAAP;AACD;AACF;;AAED,MAAIlB,aAAa,KAAb,IAAsBrB,SAASwC,gBAA/B,IAAmDX,yBAAvD,EAAkF;AAChF,WAAO,IAAP;AACD;;AAED,MAAIpC,SAASoB,EAAT,CAAY4B,OAAZ,IAAuBhD,SAASoB,EAAT,CAAYc,IAAvC,EAA6C;AAC3C,QAAIN,aAAa,KAAjB,EAAwB;AACtB,UAAIrB,SAAS0C,QAAb,EAAuB;AACrB;AACA;AACA;AACA,eAAO,IAAP;AACD;;AAED;AACA,aAAOhC,QAAQqB,YAAR,CAAqB,WAArB,KAAqCD,mBAA5C;AACD;;AAED,QAAIpB,QAAQkB,eAAZ,EAA6B;AAC3B,UAAI5B,SAAS2C,yBAAT,IAAsCb,mBAA1C,EAA+D;AAC7D,eAAO,IAAP;AACD;;AAED;AACA,aAAOpB,QAAQqB,YAAR,CAAqB,WAArB,CAAP;AACD;AACF;AACD,MAAIrB,QAAQkC,QAAR,KAAqBC,SAAzB,EAAoC;AAClC,WAAOC,QAAQ1C,OAAOK,YAAf,CAAP;AACD;;AAED,MAAIY,aAAa,OAAjB,EAA0B;AACxB,QAAI,CAACX,QAAQqB,YAAR,CAAqB,UAArB,CAAL,EAAuC;AACrC;AACA,aAAO,KAAP;AACD,KAHD,MAGO,IAAItC,SAASoB,EAAT,CAAYC,KAAhB,EAAuB;AAC5B;AACA,aAAO,IAAP;AACD;AACF;;AAED,MAAIO,aAAa,OAAjB,EAA0B;AACxB,QAAI,CAACX,QAAQqB,YAAR,CAAqB,UAArB,CAAL,EAAuC;AACrC,UAAItC,SAASoB,EAAT,CAAY4B,OAAZ,IAAuBhD,SAASoB,EAAT,CAAYc,IAAvC,EAA6C;AAC3C;AACA,eAAO,KAAP;AACD;AACF,KALD,MAKO,IAAIlC,SAASoB,EAAT,CAAYC,KAAZ,IAAqBrB,SAASoB,EAAT,CAAYkC,KAArC,EAA4C;AACjD;AACA,aAAO,IAAP;AACD;AACF;;AAED,MAAI1B,aAAa,QAAjB,EAA2B;AACzB,QAAI5B,SAASoB,EAAT,CAAYC,KAAZ,IAAqBrB,SAASoB,EAAT,CAAYK,MAArC,EAA6C;AAC3C;AACA,aAAO,KAAP;AACD;AACF;;AAED,MAAIG,aAAa,QAAjB,EAA2B;AACzB;AACA;AACA;AACA;AACA,WAAO,KAAP;AACD;;AAED,MAAI,CAACjB,OAAOE,UAAR,IAAsBb,SAASoB,EAAT,CAAYkC,KAAtC,EAA6C;AAC3C;AACA;AACA,QAAMZ,SAAQC,OAAOC,gBAAP,CAAwB3B,OAAxB,EAAiC,IAAjC,CAAd;AACA,QAAIf,qBAAqBwC,MAArB,CAAJ,EAAiC;AAC/B,aAAON,yBAAP;AACD;AACF;;AAED,MAAIpC,SAASoB,EAAT,CAAY4B,OAAZ,IAAuBhD,SAASoB,EAAT,CAAYc,IAAvC,EAA6C;AAC3C;AACA;AACA,QAAIN,aAAa,MAAjB,EAAyB;AACvB,UAAM2B,MAAMtD,eAAegB,OAAf,CAAZ;AACA,UAAIsC,OAAO1D,cAAc0D,GAAd,IAAqB,CAAhC,EAAmC;AACjC,eAAO,KAAP;AACD;AACF;;AAED,QAAMb,UAAQC,OAAOC,gBAAP,CAAwB3B,OAAxB,EAAiC,IAAjC,CAAd;AACA,QAAIZ,qBAAqBqC,OAArB,CAAJ,EAAiC;AAC/B;AACA,aAAOzB,QAAQkC,QAAR,IAAoB,CAA3B;AACD;;AAED,QAAI,CAACxC,OAAOC,OAAR,IAAmBT,kBAAkBuC,OAAlB,CAAvB,EAAiD;AAC/C,UAAIV,cAAc,IAAlB,EAAwB;AACtB,eAAOK,mBAAP;AACD;;AAED,aAAOmB,8BAA8BvC,OAA9B,KAA0CwC,yBAAyBxC,OAAzB,CAAjD;AACD;;AAED;AACA;AACA,QAAIb,sBAAsBa,OAAtB,EAA+BW,QAA/B,CAAJ,EAA8C;AAC5C,aAAO,KAAP;AACD;;AAED,QAAM8B,SAASzC,QAAQ0C,aAAvB;AACA,QAAID,MAAJ,EAAY;AACV,UAAME,iBAAiBF,OAAO9B,QAAP,CAAgBC,WAAhB,EAAvB;AACA,UAAMgC,cAAclB,OAAOC,gBAAP,CAAwBc,MAAxB,EAAgC,IAAhC,CAApB;AACA;AACA,UAAItD,sBAAsBsD,MAAtB,EAA8B9B,QAA9B,EAAwCgC,cAAxC,EAAwDC,WAAxD,CAAJ,EAA0E;AACxE,eAAO,KAAP;AACD;;AAED;AACA;AACA,UAAI1D,kBAAkB0D,WAAlB,CAAJ,EAAoC;AAClC;AACA,eAAOxB,mBAAP;AACD;AACF;AACF;;AAED;AACA,SAAOpB,QAAQkC,QAAR,IAAoB,CAA3B;AACD;;AAED;AACA1C,gBAAgBE,MAAhB,GAAyB,YAAsB;AAAA,MAAbA,MAAa,uEAAJ,EAAI;;AAC7C,MAAMmD,aAAa,SAAbA,UAAa,CAASpD,OAAT,EAAkB;AACnC,WAAOD,gBAAgB;AACrBC,sBADqB;AAErBC;AAFqB,KAAhB,CAAP;AAID,GALD;;AAOAmD,aAAWC,KAAX,GAAmBtD,eAAnB;AACA,SAAOqD,UAAP;AACD,CAVD;;AAYA,IAAMN,gCAAgC1D,cAAciE,KAAd,CAAoBpD,MAApB,CAA2B,EAACC,SAAS,IAAV,EAA3B,CAAtC;AACA,IAAM6C,2BAA2BhD,gBAAgBE,MAAhB,CAAuB,EAACC,SAAS,IAAV,EAAvB,CAAjC;;AAEA;AACA,IAAMkD,aAAarD,gBAAgBE,MAAhB,CAAuB,EAAvB,CAAnB;AACA,eAAemD,UAAf","file":"tabbable.js","sourcesContent":["\r\n// determine if an element can be focused by keyboard (i.e. is part of the document's sequential focus navigation order)\r\n\r\nimport isVisible from './visible';\r\nimport contextToElement from '../util/context-to-element';\r\nimport elementMatches from '../util/element-matches';\r\nimport tabindexValue from '../util/tabindex-value';\r\nimport focusRelevant from './focus-relevant';\r\nimport getFrameElement from '../util/get-frame-element';\r\nimport platform from '../util/platform';\r\nimport {getImageOfArea} from '../util/image-map';\r\nimport {\r\n  hasCssOverflowScroll,\r\n  hasCssDisplayFlex,\r\n  isScrollableContainer,\r\n  isUserModifyWritable,\r\n} from './is.util';\r\n\r\nimport _supports from '../supports/supports';\r\nlet supports;\r\n\r\n// Internet Explorer 11 considers fieldset, table, td focusable, but not tabbable\r\n// Internet Explorer 11 considers body to have [tabindex=0], but does not allow tabbing to it\r\nconst focusableElementsPattern = /^(fieldset|table|td|body)$/;\r\n\r\nfunction isTabbableRules({\r\n  context,\r\n  except = {\r\n    flexbox: false,\r\n    scrollable: false,\r\n    shadow: false,\r\n    visible: false,\r\n    onlyTabbable: false,\r\n  },\r\n} = {}) {\r\n  if (!supports) {\r\n    supports = _supports();\r\n  }\r\n\r\n  const element = contextToElement({\r\n    label: 'is/tabbable',\r\n    resolveDocument: true,\r\n    context,\r\n  });\r\n\r\n  if (platform.is.BLINK && platform.is.ANDROID && platform.majorVersion > 42) {\r\n    // External keyboard support worked fine in CHrome 42, but stopped working in Chrome 45.\r\n    // The on-screen keyboard does not provide a way to focus the next input element (like iOS does).\r\n    // That leaves us with no option to advance focus by keyboard, ergo nothing is tabbable (keyboard focusable).\r\n    return false;\r\n  }\r\n\r\n  const frameElement = getFrameElement(element);\r\n  if (frameElement) {\r\n    if (platform.is.WEBKIT && platform.is.IOS) {\r\n      // iOS only does not consider anything from another browsing context keyboard focusable\r\n      return false;\r\n    }\r\n\r\n    // iframe[tabindex=\"-1\"] and object[tabindex=\"-1\"] inherit the\r\n    // tabbable demotion onto elements of their browsing contexts\r\n    if (tabindexValue(frameElement) < 0) {\r\n      return false;\r\n    }\r\n\r\n    if (!except.visible && (platform.is.BLINK || platform.is.WEBKIT) && !isVisible(frameElement)) {\r\n      // Blink and WebKit consider elements in hidden browsing contexts focusable, but not tabbable\r\n      return false;\r\n    }\r\n\r\n    // Webkit and Blink don't consider anything in <object> tabbable\r\n    // Blink fixed that fixed in Chrome 54, Opera 41\r\n    const frameNodeName = frameElement.nodeName.toLowerCase();\r\n    if (frameNodeName === 'object') {\r\n      const isFixedBlink = (platform.name === 'Chrome' && platform.majorVersion >= 54)\r\n        || (platform.name === 'Opera' && platform.majorVersion >= 41);\r\n\r\n      if (platform.is.WEBKIT || (platform.is.BLINK && !isFixedBlink)) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  const nodeName = element.nodeName.toLowerCase();\r\n  const _tabindex = tabindexValue(element);\r\n  const tabindex = _tabindex === null ? null : _tabindex >= 0;\r\n\r\n  if (platform.is.EDGE && platform.majorVersion >= 14 && frameElement && element.ownerSVGElement && _tabindex < 0) {\r\n    // Edge 14+ considers <a xlink:href=\"…\" tabindex=\"-1\"> keyboard focusable\r\n    // if the element is in a nested browsing context\r\n    return true;\r\n  }\r\n\r\n  const hasTabbableTabindexOrNone = tabindex !== false;\r\n  const hasTabbableTabindex = _tabindex !== null && _tabindex >= 0;\r\n\r\n  // NOTE: Firefox 31 considers [contenteditable] to have [tabindex=-1], but allows tabbing to it\r\n  // fixed in Firefox 40 the latest - https://bugzilla.mozilla.org/show_bug.cgi?id=1185657\r\n  if (element.hasAttribute('contenteditable')) {\r\n    // tabbing can still be disabled by explicitly providing [tabindex=\"-1\"]\r\n    return hasTabbableTabindexOrNone;\r\n  }\r\n\r\n  if (focusableElementsPattern.test(nodeName) && tabindex !== true) {\r\n    return false;\r\n  }\r\n\r\n  if (platform.is.WEBKIT && platform.is.IOS) {\r\n    // iOS only considers a hand full of elements tabbable (keyboard focusable)\r\n    // this holds true even with external keyboards\r\n    let potentiallyTabbable = (nodeName === 'input' && element.type === 'text' || element.type === 'password')\r\n      || nodeName === 'select'\r\n      || nodeName === 'textarea'\r\n      || element.hasAttribute('contenteditable');\r\n\r\n    if (!potentiallyTabbable) {\r\n      const style = window.getComputedStyle(element, null);\r\n      potentiallyTabbable = isUserModifyWritable(style);\r\n    }\r\n\r\n    if (!potentiallyTabbable) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  if (nodeName === 'use' && _tabindex !== null) {\r\n    if (platform.is.BLINK || platform.is.WEBKIT && platform.majorVersion === 9) {\r\n      // In Chrome and Safari 9 the <use> element is keyboard focusable even for tabindex=\"-1\"\r\n      return true;\r\n    }\r\n  }\r\n\r\n  if (elementMatches(element, 'svg a') && element.hasAttribute('xlink:href')) {\r\n    if (hasTabbableTabindexOrNone) {\r\n      // in Trident and Gecko SVGElement does not handle the tabIndex property properly\r\n      return true;\r\n    }\r\n\r\n    if (element.focus && !supports.focusSvgNegativeTabindexAttribute) {\r\n      // Firefox 51 and 52 treat any natively tabbable SVG element with\r\n      // tabindex=\"-1\" as tabbable and everything else as inert\r\n      // see https://bugzilla.mozilla.org/show_bug.cgi?id=1302340\r\n      return true;\r\n    }\r\n  }\r\n\r\n  if (nodeName === 'svg' && supports.focusSvgInIframe && hasTabbableTabindexOrNone) {\r\n    return true;\r\n  }\r\n\r\n  if (platform.is.TRIDENT || platform.is.EDGE) {\r\n    if (nodeName === 'svg') {\r\n      if (supports.focusSvg) {\r\n        // older Internet Explorers consider <svg> keyboard focusable\r\n        // unless they have focsable=\"false\", but then they wouldn't\r\n        // be focusable and thus not even reach this filter\r\n        return true;\r\n      }\r\n\r\n      // elements that have [focusable] are automatically keyboard focusable regardless of the attribute's value\r\n      return element.hasAttribute('focusable') || hasTabbableTabindex;\r\n    }\r\n\r\n    if (element.ownerSVGElement) {\r\n      if (supports.focusSvgTabindexAttribute && hasTabbableTabindex) {\r\n        return true;\r\n      }\r\n\r\n      // elements that have [focusable] are automatically keyboard focusable regardless of the attribute's value\r\n      return element.hasAttribute('focusable');\r\n    }\r\n  }\r\n  if (element.tabIndex === undefined) {\r\n    return Boolean(except.onlyTabbable);\r\n  }\r\n\r\n  if (nodeName === 'audio') {\r\n    if (!element.hasAttribute('controls')) {\r\n      // In Internet Explorer the <audio> element is focusable, but not tabbable, and tabIndex property is wrong\r\n      return false;\r\n    } else if (platform.is.BLINK) {\r\n      // In Chrome <audio controls tabindex=\"-1\"> remains keyboard focusable\r\n      return true;\r\n    }\r\n  }\r\n\r\n  if (nodeName === 'video') {\r\n    if (!element.hasAttribute('controls')) {\r\n      if (platform.is.TRIDENT || platform.is.EDGE) {\r\n        // In Internet Explorer and Edge the <video> element is focusable, but not tabbable, and tabIndex property is wrong\r\n        return false;\r\n      }\r\n    } else if (platform.is.BLINK || platform.is.GECKO) {\r\n      // In Chrome and Firefox <video controls tabindex=\"-1\"> remains keyboard focusable\r\n      return true;\r\n    }\r\n  }\r\n\r\n  if (nodeName === 'object') {\r\n    if (platform.is.BLINK || platform.is.WEBKIT) {\r\n      // In all Blink and WebKit based browsers <embed> and <object> are never keyboard focusable, even with tabindex=\"0\" set\r\n      return false;\r\n    }\r\n  }\r\n\r\n  if (nodeName === 'iframe') {\r\n    // In Internet Explorer all iframes are only focusable\r\n    // In WebKit, Blink and Gecko iframes may be tabbable depending on content.\r\n    // Since we can't reliably investigate iframe documents because of the\r\n    // SameOriginPolicy, we're declaring everything only focusable.\r\n    return false;\r\n  }\r\n\r\n  if (!except.scrollable && platform.is.GECKO) {\r\n    // Firefox considers scrollable containers keyboard focusable,\r\n    // even though their tabIndex property is -1\r\n    const style = window.getComputedStyle(element, null);\r\n    if (hasCssOverflowScroll(style)) {\r\n      return hasTabbableTabindexOrNone;\r\n    }\r\n  }\r\n\r\n  if (platform.is.TRIDENT || platform.is.EDGE) {\r\n    // IE and Edge degrade <area> to script focusable, if the image\r\n    // using the <map> has been given tabindex=\"-1\"\r\n    if (nodeName === 'area') {\r\n      const img = getImageOfArea(element);\r\n      if (img && tabindexValue(img) < 0) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    const style = window.getComputedStyle(element, null);\r\n    if (isUserModifyWritable(style)) {\r\n      // prevent being swallowed by the overzealous isScrollableContainer() below\r\n      return element.tabIndex >= 0;\r\n    }\r\n\r\n    if (!except.flexbox && hasCssDisplayFlex(style)) {\r\n      if (_tabindex !== null) {\r\n        return hasTabbableTabindex;\r\n      }\r\n\r\n      return isFocusRelevantWithoutFlexbox(element) && isTabbableWithoutFlexbox(element);\r\n    }\r\n\r\n    // IE considers scrollable containers script focusable only,\r\n    // even though their tabIndex property is 0\r\n    if (isScrollableContainer(element, nodeName)) {\r\n      return false;\r\n    }\r\n\r\n    const parent = element.parentElement;\r\n    if (parent) {\r\n      const parentNodeName = parent.nodeName.toLowerCase();\r\n      const parentStyle = window.getComputedStyle(parent, null);\r\n      // IE considers scrollable bodies script focusable only,\r\n      if (isScrollableContainer(parent, nodeName, parentNodeName, parentStyle)) {\r\n        return false;\r\n      }\r\n\r\n      // Children of focusable elements with display:flex are focusable in IE10-11,\r\n      // even though their tabIndex property suggests otherwise\r\n      if (hasCssDisplayFlex(parentStyle)) {\r\n        // value of tabindex takes precedence\r\n        return hasTabbableTabindex;\r\n      }\r\n    }\r\n  }\r\n\r\n  // https://www.w3.org/WAI/PF/aria-practices/#focus_tabindex\r\n  return element.tabIndex >= 0;\r\n}\r\n\r\n// bind exceptions to an iterator callback\r\nisTabbableRules.except = function(except = {}) {\r\n  const isTabbable = function(context) {\r\n    return isTabbableRules({\r\n      context,\r\n      except,\r\n    });\r\n  };\r\n\r\n  isTabbable.rules = isTabbableRules;\r\n  return isTabbable;\r\n};\r\n\r\nconst isFocusRelevantWithoutFlexbox = focusRelevant.rules.except({flexbox: true});\r\nconst isTabbableWithoutFlexbox = isTabbableRules.except({flexbox: true});\r\n\r\n// provide isTabbable(context) as default iterator callback\r\nconst isTabbable = isTabbableRules.except({});\r\nexport default isTabbable;\r\n"]}