{"version":3,"sources":["../../src/maintain/disabled.js"],"names":["context","filter","service","InertSubtree","disengage","makeElementInert","element","undoElementInert","observerConfig","attributes","childList","subtree","attributeFilter","_context","document","documentElement","_filter","_inertElementCache","bind","handleMutation","renderInert","filterElements","filterParentElements","focusable","includeContext","strategy","shadowObserver","config","callback","mutations","forEach","list","map","reduce","previous","current","concat","elements","makeInert","push","isParentOfElement","includeSelf","some","parent","mutation","type","addedElements","addedNodes","nodeType","Node","ELEMENT_NODE","length","addedFocusableElements","listQueryFocusable","target"],"mappings":"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","file":"disabled.js","sourcesContent":["\r\n/*\r\n  Utility to make a sub-tree of the DOM inert. Inert means the elements cannot be interacted\r\n  with and they cannot be focused via script, pointer or keyboard.\r\n\r\n  inert attribute was [removed](https://html5.org/r/8536) [tweet by steve](https://twitter.com/stevefaulkner/status/443075900201259008)\r\n  but definition of [inert subtrees](https://www.w3.org/html/wg/drafts/html/master/editing.html#inert-subtrees) remains.\r\n\r\n  [implementation idea by Vasilis](https://codepen.io/vasilisvg/pen/scowI)\r\n  [inert attribute polyfill by GoogleChrome](https://github.com/GoogleChrome/inert-polyfill)\r\n\r\n  [Gecko Bug: Inert Attribute](https://bugzilla.mozilla.org/show_bug.cgi?id=921504)\r\n  [Chromium Bug: Inert Attribute](https://code.google.com/p/chromium/issues/detail?id=269846)\r\n  [Chromium Bug: Inert Subtree](https://code.google.com/p/chromium/issues/detail?id=241699)\r\n  [WebKit Bug: Inert Subtree](https://bugs.webkit.org/show_bug.cgi?id=110952)\r\n*/\r\n\r\nimport nodeArray from '../util/node-array';\r\nimport queryFocusable from '../query/focusable';\r\nimport elementDisabled from '../element/disabled';\r\nimport observeShadowMutations from '../observe/shadow-mutations';\r\nimport {getParentComparator} from '../util/compare-position';\r\n\r\nfunction makeElementInert(element) {\r\n  return elementDisabled(element, true);\r\n}\r\n\r\nfunction undoElementInert(element) {\r\n  return elementDisabled(element, false);\r\n}\r\n\r\nconst observerConfig = {\r\n  attributes: true,\r\n  childList: true,\r\n  subtree: true,\r\n  attributeFilter: ['tabindex', 'disabled', 'data-ally-disabled'],\r\n};\r\n\r\nclass InertSubtree {\r\n  constructor({context, filter} = {}) {\r\n    this._context = nodeArray(context || document.documentElement)[0];\r\n    this._filter = nodeArray(filter);\r\n    this._inertElementCache = [];\r\n\r\n    this.disengage = this.disengage.bind(this);\r\n    this.handleMutation = this.handleMutation.bind(this);\r\n    this.renderInert = this.renderInert.bind(this);\r\n    this.filterElements = this.filterElements.bind(this);\r\n    this.filterParentElements = this.filterParentElements.bind(this);\r\n\r\n    const focusable = queryFocusable({\r\n      context: this._context,\r\n      includeContext: true,\r\n      strategy: 'all',\r\n    });\r\n\r\n    this.renderInert(focusable);\r\n\r\n    this.shadowObserver = observeShadowMutations({\r\n      context: this._context,\r\n      config: observerConfig,\r\n      callback: mutations => mutations.forEach(this.handleMutation),\r\n    });\r\n  }\r\n\r\n  disengage() {\r\n    if (!this._context) {\r\n      return;\r\n    }\r\n\r\n    undoElementInert(this._context);\r\n    this._inertElementCache.forEach((element) => undoElementInert(element));\r\n\r\n    this._inertElementCache = null;\r\n    this._filter = null;\r\n    this._context = null;\r\n    this.shadowObserver && this.shadowObserver.disengage();\r\n    this.shadowObserver = null;\r\n  }\r\n\r\n  listQueryFocusable(list) {\r\n    return list\r\n      // find all focusable elements within the given contexts\r\n      .map(element => queryFocusable({context: element, includeContext: true, strategy: 'all'}))\r\n      // flatten nested arrays\r\n      .reduce((previous, current) => previous.concat(current), []);\r\n  }\r\n\r\n  renderInert(elements) {\r\n    const makeInert = (element) => {\r\n      this._inertElementCache.push(element);\r\n      makeElementInert(element);\r\n    };\r\n\r\n    elements\r\n      .filter(this.filterElements)\r\n      .filter(this.filterParentElements)\r\n      // ignore elements that already are disabled\r\n      // so we don't enable them on disengage()\r\n      .filter(element => !elementDisabled(element))\r\n      .forEach(makeInert);\r\n  }\r\n\r\n  filterElements(element) {\r\n    // ignore elements within the exempted sub-trees\r\n    const isParentOfElement = getParentComparator({element, includeSelf: true});\r\n    return !this._filter.some(isParentOfElement);\r\n  }\r\n\r\n  filterParentElements(element) {\r\n    // ignore ancestors of the exempted sub-trees\r\n    const isParentOfElement = getParentComparator({parent: element});\r\n    return !this._filter.some(isParentOfElement);\r\n  }\r\n\r\n  handleMutation(mutation) {\r\n    if (mutation.type === 'childList') {\r\n      const addedElements = nodeArray(mutation.addedNodes).filter(element => element.nodeType === Node.ELEMENT_NODE);\r\n      if (!addedElements.length) {\r\n        return;\r\n      }\r\n\r\n      const addedFocusableElements = this.listQueryFocusable(addedElements);\r\n      this.renderInert(addedFocusableElements);\r\n    } else if (mutation.type === 'attributes') {\r\n      this.renderInert([mutation.target]);\r\n    }\r\n  }\r\n}\r\n\r\nexport default function({context, filter} = {}) {\r\n  const service = new InertSubtree({context, filter});\r\n  return { disengage: service.disengage };\r\n}\r\n"]}