{"version":3,"sources":["../../src/util/merge-dom-order.js"],"names":["list","elements","resolveElement","_list","slice","_elements","insertions","findInsertionOffsets","insertElementsAtOffsets","getFirstSuccessorOffset","target","element","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","forEach","replace","offset","indexOf","length","injections","push","inserted","sort","a","b","insertion","remove","args","concat","splice","apply"],"mappings":";;;;;;;;;;;;;;;;;;;oBAoFe,YAAgD;AAAA,mFAAJ,EAAI;AAAA,QAAtCA,IAAsC,QAAtCA,IAAsC;AAAA,QAAhCC,QAAgC,QAAhCA,QAAgC;AAAA,QAAtBC,cAAsB,QAAtBA,cAAsB;;AAC7D;AACA,QAAMC,QAAQH,KAAKI,KAAL,CAAW,CAAX,CAAd;AACA;AACA,QAAMC,YAAY,yBAAUJ,QAAV,EAAoBG,KAApB,CAA0B,CAA1B,CAAlB;AACA,gCAAaC,SAAb;AACA;AACA;AACA,QAAMC,aAAaC,qBAAqBJ,KAArB,EAA4BE,SAA5B,EAAuCH,cAAvC,CAAnB;AACA;AACAM,4BAAwBL,KAAxB,EAA+BG,UAA/B;AACA,WAAOH,KAAP;AACD,G;;;;;;;;;;;;;;AAxED,WAASM,uBAAT,CAAiCT,IAAjC,EAAuCU,MAAvC,EAA+C;AAC7C;AACA,WAAO,8BAAUV,IAAV,EAAgB,UAASW,OAAT,EAAkB;AACvC,aAAOD,OAAOE,uBAAP,CAA+BD,OAA/B,IAA0CE,KAAKC,2BAAtD;AACD,KAFM,CAAP;AAGD;AA5BD;;AAEA;;;;;;;;;;;;;;;;;AA4BA,WAASP,oBAAT,CAA8BP,IAA9B,EAAoCC,QAApC,EAA8CC,cAA9C,EAA8D;AAC5D;AACA;AACA,QAAMI,aAAa,EAAnB;AACAL,aAASc,OAAT,CAAiB,UAASJ,OAAT,EAAkB;AACjC,UAAIK,UAAU,IAAd;AACA,UAAIC,SAASjB,KAAKkB,OAAL,CAAaP,OAAb,CAAb;;AAEA,UAAIM,WAAW,CAAC,CAAhB,EAAmB;AACjB;AACAA,iBAASR,wBAAwBT,IAAxB,EAA8BW,OAA9B,CAAT;AACAK,kBAAU,KAAV;AACD;;AAED,UAAIC,WAAW,CAAC,CAAhB,EAAmB;AACjB;AACA;AACAA,iBAASjB,KAAKmB,MAAd;AACD;;AAED;AACA,UAAMC,aAAa,yBAAUlB,iBAAiBA,eAAeS,OAAf,CAAjB,GAA2CA,OAArD,CAAnB;AACA,UAAI,CAACS,WAAWD,MAAhB,EAAwB;AACtB;AACA;AACD;;AAEDb,iBAAWe,IAAX,CAAgB;AACdJ,sBADc;AAEdD,wBAFc;AAGdf,kBAAUmB;AAHI,OAAhB;AAKD,KA5BD;;AA8BA,WAAOd,UAAP;AACD;;AAED,WAASE,uBAAT,CAAiCR,IAAjC,EAAuCM,UAAvC,EAAmD;AACjD;AACA;AACA,QAAIgB,WAAW,CAAf;AACA;AACA;AACAhB,eAAWiB,IAAX,CAAgB,UAACC,CAAD,EAAIC,CAAJ;AAAA,aAAUD,EAAEP,MAAF,GAAWQ,EAAER,MAAvB;AAAA,KAAhB;AACAX,eAAWS,OAAX,CAAmB,UAASW,SAAT,EAAoB;AACrC;AACA,UAAMC,SAASD,UAAUV,OAAV,GAAoB,CAApB,GAAwB,CAAvC;AACA,UAAMY,OAAO,CAACF,UAAUT,MAAV,GAAmBK,QAApB,EAA8BK,MAA9B,EAAsCE,MAAtC,CAA6CH,UAAUzB,QAAvD,CAAb;AACAD,WAAK8B,MAAL,CAAYC,KAAZ,CAAkB/B,IAAlB,EAAwB4B,IAAxB;AACAN,kBAAYI,UAAUzB,QAAV,CAAmBkB,MAAnB,GAA4BQ,MAAxC;AACD,KAND;AAOD","file":"merge-dom-order.js","sourcesContent":["\r\n// sort a list of elements into another list of elements in DOM order\r\n\r\n/*\r\n  USAGE:\r\n    mergeDomOrder({\r\n      // DOM ordered array of elements to use as base of merge\r\n      list: [],\r\n      // unordered array of elements to merge into base list\r\n      elements: [],\r\n      // callback function to resolve an element\r\n      resolveElement: function(element) {\r\n        // return null to skip\r\n        // return element to replace insertion\r\n        // return [element1, element2, â€¦] to replace insertion with multiple elements\r\n        return element;\r\n      },\r\n    })\r\n*/\r\n\r\nimport findIndex from '../util/array-find-index';\r\nimport nodeArray from './node-array';\r\nimport sortDomOrder from './sort-dom-order';\r\n\r\nfunction getFirstSuccessorOffset(list, target) {\r\n  // find the first element that comes AFTER the target element\r\n  return findIndex(list, function(element) {\r\n    return target.compareDocumentPosition(element) & Node.DOCUMENT_POSITION_FOLLOWING;\r\n  });\r\n}\r\n\r\nfunction findInsertionOffsets(list, elements, resolveElement) {\r\n  // instead of mutating the elements list directly, remember position and map\r\n  // to inject later, when we can do this more efficiently\r\n  const insertions = [];\r\n  elements.forEach(function(element) {\r\n    let replace = true;\r\n    let offset = list.indexOf(element);\r\n\r\n    if (offset === -1) {\r\n      // element is not in target list\r\n      offset = getFirstSuccessorOffset(list, element);\r\n      replace = false;\r\n    }\r\n\r\n    if (offset === -1) {\r\n      // there is no successor in the tabsequence,\r\n      // meaning the image must be the last element\r\n      offset = list.length;\r\n    }\r\n\r\n    // allow the consumer to replace the injected element\r\n    const injections = nodeArray(resolveElement ? resolveElement(element) : element);\r\n    if (!injections.length) {\r\n      // we can't inject zero elements\r\n      return;\r\n    }\r\n\r\n    insertions.push({\r\n      offset,\r\n      replace,\r\n      elements: injections,\r\n    });\r\n  });\r\n\r\n  return insertions;\r\n}\r\n\r\nfunction insertElementsAtOffsets(list, insertions) {\r\n  // remember the number of elements we have already injected\r\n  // so we account for the caused index offset\r\n  let inserted = 0;\r\n  // make sure that we insert the elements in sequence,\r\n  // otherwise the offset compensation won't work\r\n  insertions.sort((a, b) => a.offset - b.offset);\r\n  insertions.forEach(function(insertion) {\r\n    // array.splice has an annoying function signature :(\r\n    const remove = insertion.replace ? 1 : 0;\r\n    const args = [insertion.offset + inserted, remove].concat(insertion.elements);\r\n    list.splice.apply(list, args);\r\n    inserted += insertion.elements.length - remove;\r\n  });\r\n}\r\n\r\nexport default function({list, elements, resolveElement} = {}) {\r\n  // operate on a copy so we don't mutate the original array\r\n  const _list = list.slice(0);\r\n  // make sure the elements we're injecting are provided in DOM order\r\n  const _elements = nodeArray(elements).slice(0);\r\n  sortDomOrder(_elements);\r\n  // find the offsets within the target array (list) at which to inject\r\n  // each individual element (from elements)\r\n  const insertions = findInsertionOffsets(_list, _elements, resolveElement);\r\n  // actually inject the elements into the target array at the identified positions\r\n  insertElementsAtOffsets(_list, insertions);\r\n  return _list;\r\n}\r\n"]}