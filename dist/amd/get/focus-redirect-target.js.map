{"version":3,"sources":["../../src/get/focus-redirect-target.js"],"names":["context","skipFocusable","supports","element","label","nodeName","toLowerCase","_document","resolveLabelElement","resolveLegendElement","resolveImgElement","formControlElement","forId","getAttribute","getElementById","querySelector","resolveLegendWithinFieldset","fieldset","parentNode","focusable","strategy","filter","resolveLegendWithinDocument","tabbable","body","length","merged","list","elements","offset","indexOf","focusRedirectLegend","focusRedirectImgUsemap","map"],"mappings":"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","file":"focus-redirect-target.js","sourcesContent":["\r\nimport isFocusable from '../is/focusable';\r\nimport queryFocusable from '../query/focusable';\r\nimport queryTabbable from '../query/tabbable';\r\nimport contextToElement from '../util/context-to-element';\r\nimport getDocument from '../util/get-document';\r\nimport mergeInDomOrder from '../util/merge-dom-order';\r\nimport {getMapOfImage} from '../util/image-map';\r\n\r\nimport _supports from '../supports/supports';\r\nlet supports;\r\n\r\nfunction formControlElement(element) {\r\n  const nodeName = element.nodeName.toLowerCase();\r\n  return nodeName === 'input'\r\n    || nodeName === 'textarea'\r\n    || nodeName === 'select'\r\n    || nodeName === 'button';\r\n}\r\n\r\nfunction resolveLabelElement(element, _document) {\r\n  const forId = element.getAttribute('for');\r\n  if (forId) {\r\n    // <label for=\"…\"> - referenced form control\r\n    return _document.getElementById(forId);\r\n  }\r\n\r\n  // <label><input - nested form control\r\n  return element.querySelector('input, select, textarea');\r\n}\r\n\r\nfunction resolveLegendWithinFieldset(element) {\r\n  // Chrome: first focusable input/select/textarea/button within <fieldset>\r\n  const fieldset = element.parentNode;\r\n  const focusable = queryFocusable({\r\n    context: fieldset,\r\n    strategy: 'strict',\r\n  });\r\n\r\n  return focusable.filter(formControlElement)[0] || null;\r\n}\r\n\r\nfunction resolveLegendWithinDocument(element, _document) {\r\n  // Firefox: *next* tabbable (in DOM order)\r\n  const tabbable = queryTabbable({\r\n    // Firefox apparently needs to query from the body element,\r\n    // not the document, looking inside a dynamically written iframe\r\n    context: _document.body,\r\n    strategy: 'strict',\r\n  });\r\n\r\n  if (!tabbable.length) {\r\n    return null;\r\n  }\r\n\r\n  // sort <legend> into the list of tabbable elements\r\n  // so that we can identify the next element\r\n  const merged = mergeInDomOrder({\r\n    list: tabbable,\r\n    elements: [element],\r\n  });\r\n\r\n  const offset = merged.indexOf(element);\r\n  if (offset === merged.length - 1) {\r\n    return null;\r\n  }\r\n\r\n  return merged[offset + 1];\r\n}\r\n\r\nfunction resolveLegendElement(element, _document) {\r\n  // <legend> - first <input> in <fieldset>\r\n  if (!supports.focusRedirectLegend) {\r\n    return null;\r\n  }\r\n\r\n  // legend must be the first child of a <fieldset>\r\n  const fieldset = element.parentNode;\r\n  if (fieldset.nodeName.toLowerCase() !== 'fieldset') {\r\n    return null;\r\n  }\r\n\r\n  if (supports.focusRedirectLegend === 'tabbable') {\r\n    // Firefox goes for *next* tabbable (in DOM order)\r\n    return resolveLegendWithinDocument(element, _document);\r\n  }\r\n\r\n  // Chrome goes for first focusable input/select/textarea/button within <fieldset>\r\n  return resolveLegendWithinFieldset(element, _document);\r\n}\r\n\r\nfunction resolveImgElement(element) {\r\n  if (!supports.focusRedirectImgUsemap) {\r\n    return null;\r\n  }\r\n\r\n  // IE9-11: <img usemap=\"#…\" src=\"…\"> - first <area>\r\n  const map = getMapOfImage(element);\r\n  return map && map.querySelector('area') || null;\r\n}\r\n\r\nexport default function({context, skipFocusable} = {}) {\r\n  if (!supports) {\r\n    supports = _supports();\r\n  }\r\n\r\n  const element = contextToElement({\r\n    label: 'get/focus-redirect-target',\r\n    context,\r\n  });\r\n\r\n  if (!skipFocusable && isFocusable(element)) {\r\n    return null;\r\n  }\r\n\r\n  const nodeName = element.nodeName.toLowerCase();\r\n  const _document = getDocument(element);\r\n\r\n  if (nodeName === 'label') {\r\n    return resolveLabelElement(element, _document);\r\n  }\r\n\r\n  if (nodeName === 'legend') {\r\n    return resolveLegendElement(element, _document);\r\n  }\r\n\r\n  if (nodeName === 'img') {\r\n    return resolveImgElement(element, _document);\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\n"]}