{"version":3,"sources":["../../src/query/focusable.strict.js"],"names":["queryFocusableStrict","createFilter","condition","filter","node","shadowRoot","NodeFilter","FILTER_ACCEPT","FILTER_SKIP","acceptNode","PossiblyFocusableFilter","isFocusRelevant","context","includeContext","includeOnlyTabbable","strategy","document","documentElement","_isFocusable","isFocusable","rules","except","onlyTabbable","_document","walker","createTreeWalker","SHOW_ELEMENT","list","nextNode","currentNode","push","concat","unshift"],"mappings":";;;;;;;;;;;;;;;;;;oBAgCwBA,oB;;;;;;;;;;;;;;AAxBxB,WAASC,YAAT,CAAsBC,SAAtB,EAAiC;AAC/B;AACA,QAAMC,SAAS,SAATA,MAAS,CAASC,IAAT,EAAe;AAC5B,UAAIA,KAAKC,UAAT,EAAqB;AACnB;AACA;AACA,eAAOC,WAAWC,aAAlB;AACD;;AAED,UAAIL,UAAUE,IAAV,CAAJ,EAAqB;AACnB;AACA,eAAOE,WAAWC,aAAlB;AACD;;AAED,aAAOD,WAAWE,WAAlB;AACD,KAbD;AAcA;AACA;AACAL,WAAOM,UAAP,GAAoBN,MAApB;AACA,WAAOA,MAAP;AACD;AA3BD;AACA;;AA4BA,MAAMO,0BAA0BT,aAAaU,uBAAb,CAAhC;;AAEe,WAASX,oBAAT,GAKP;AAAA,mFAAJ,EAAI;AAAA,QAJNY,OAIM,QAJNA,OAIM;AAAA,QAHNC,cAGM,QAHNA,cAGM;AAAA,QAFNC,mBAEM,QAFNA,mBAEM;AAAA,QADNC,QACM,QADNA,QACM;;AACN,QAAI,CAACH,OAAL,EAAc;AACZA,gBAAUI,SAASC,eAAnB;AACD;;AAED,QAAMC,eAAeC,oBAAYC,KAAZ,CAAkBC,MAAlB,CAAyB;AAC5CC,oBAAcR;AAD8B,KAAzB,CAArB;;AAIA,QAAMS,YAAY,2BAAYX,OAAZ,CAAlB;AACA;AACA,QAAMY,SAASD,UAAUE,gBAAV;AACb;AACAb,WAFa;AAGb;AACAN,eAAWoB,YAJE;AAKb;AACAX,iBAAa,KAAb,GAAqBL,uBAArB,GAA+CT,aAAaiB,YAAb,CANlC;AAOb;AACA,SARa,CAAf;;AAWA,QAAIS,OAAO,EAAX;;AAEA,WAAOH,OAAOI,QAAP,EAAP,EAA0B;AACxB,UAAIJ,OAAOK,WAAP,CAAmBxB,UAAvB,EAAmC;AACjC,YAAIa,aAAaM,OAAOK,WAApB,CAAJ,EAAsC;AACpCF,eAAKG,IAAL,CAAUN,OAAOK,WAAjB;AACD;;AAEDF,eAAOA,KAAKI,MAAL,CAAY/B,qBAAqB;AACtCY,mBAASY,OAAOK,WAAP,CAAmBxB,UADU;AAEtCS,kDAFsC;AAGtCC;AAHsC,SAArB,CAAZ,CAAP;AAKD,OAVD,MAUO;AACLY,aAAKG,IAAL,CAAUN,OAAOK,WAAjB;AACD;AACF;;AAED;AACA,QAAIhB,cAAJ,EAAoB;AAClB,UAAIE,aAAa,KAAjB,EAAwB;AACtB,YAAI,6BAAgBH,OAAhB,CAAJ,EAA8B;AAC5Be,eAAKK,OAAL,CAAapB,OAAb;AACD;AACF,OAJD,MAIO,IAAIM,aAAaN,OAAb,CAAJ,EAA2B;AAChCe,aAAKK,OAAL,CAAapB,OAAb;AACD;AACF;;AAED,WAAOe,IAAP;AACD","file":"focusable.strict.js","sourcesContent":["\r\n// https://www.w3.org/TR/html5/editing.html#focusable\r\n// https://www.w3.org/WAI/PF/aria-practices/#keyboard\r\n\r\nimport isFocusable from '../is/focusable';\r\nimport isFocusRelevant from '../is/focus-relevant';\r\nimport getDocument from '../util/get-document';\r\n\r\nfunction createFilter(condition) {\r\n  // see https://developer.mozilla.org/en-US/docs/Web/API/NodeFilter\r\n  const filter = function(node) {\r\n    if (node.shadowRoot) {\r\n      // return ShadowRoot elements regardless of them being focusable,\r\n      // so they can be walked recursively later\r\n      return NodeFilter.FILTER_ACCEPT;\r\n    }\r\n\r\n    if (condition(node)) {\r\n      // finds elements that could have been found by document.querySelectorAll()\r\n      return NodeFilter.FILTER_ACCEPT;\r\n    }\r\n\r\n    return NodeFilter.FILTER_SKIP;\r\n  };\r\n  // IE requires a function, Browsers require {acceptNode: function}\r\n  // see http://www.bennadel.com/blog/2607-finding-html-comment-nodes-in-the-dom-using-treewalker.htm\r\n  filter.acceptNode = filter;\r\n  return filter;\r\n}\r\n\r\nconst PossiblyFocusableFilter = createFilter(isFocusRelevant);\r\n\r\nexport default function queryFocusableStrict({\r\n  context,\r\n  includeContext,\r\n  includeOnlyTabbable,\r\n  strategy,\r\n} = {}) {\r\n  if (!context) {\r\n    context = document.documentElement;\r\n  }\r\n\r\n  const _isFocusable = isFocusable.rules.except({\r\n    onlyTabbable: includeOnlyTabbable,\r\n  });\r\n\r\n  const _document = getDocument(context);\r\n  // see https://developer.mozilla.org/en-US/docs/Web/API/Document/createTreeWalker\r\n  const walker = _document.createTreeWalker(\r\n    // root element to start search in\r\n    context,\r\n    // element type filter\r\n    NodeFilter.SHOW_ELEMENT,\r\n    // custom NodeFilter filter\r\n    strategy === 'all' ? PossiblyFocusableFilter : createFilter(_isFocusable),\r\n    // deprecated, but IE requires it\r\n    false\r\n  );\r\n\r\n  let list = [];\r\n\r\n  while (walker.nextNode()) {\r\n    if (walker.currentNode.shadowRoot) {\r\n      if (_isFocusable(walker.currentNode)) {\r\n        list.push(walker.currentNode);\r\n      }\r\n\r\n      list = list.concat(queryFocusableStrict({\r\n        context: walker.currentNode.shadowRoot,\r\n        includeOnlyTabbable,\r\n        strategy,\r\n      }));\r\n    } else {\r\n      list.push(walker.currentNode);\r\n    }\r\n  }\r\n\r\n  // add context if requested and focusable\r\n  if (includeContext) {\r\n    if (strategy === 'all') {\r\n      if (isFocusRelevant(context)) {\r\n        list.unshift(context);\r\n      }\r\n    } else if (_isFocusable(context)) {\r\n      list.unshift(context);\r\n    }\r\n  }\r\n\r\n  return list;\r\n}\r\n"]}