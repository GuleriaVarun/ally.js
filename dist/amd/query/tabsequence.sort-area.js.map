{"version":3,"sources":["../../src/query/tabsequence.sort-area.js"],"names":["elements","context","usemaps","querySelectorAll","maps","Maps","_elements","extractAreasFromList","length","list","resolveElement","image","name","getAttribute","slice","getAreasFor","_document","addMapByName","map","filter","element","nodeName","toLowerCase","parentNode","push"],"mappings":";;;;;;;;;;;;;;;;;;;oBAsDe,UAASA,QAAT,EAAmBC,OAAnB,EAA4B;AACzC;AACA;AACA;AACA,QAAMC,UAAUD,QAAQE,gBAAR,CAAyB,aAAzB,CAAhB;AACA,QAAMC,OAAO,IAAIC,IAAJ,CAASJ,OAAT,CAAb;;AAEA;AACA;AACA,QAAMK,YAAYF,KAAKG,oBAAL,CAA0BP,QAA1B,CAAlB;;AAEA,QAAI,CAACE,QAAQM,MAAb,EAAqB;AACnB;AACA;AACA,aAAOF,SAAP;AACD;;AAED,WAAO,6BAAgB;AACrBG,YAAMH,SADe;AAErBN,gBAAUE,OAFW;AAGrBQ,sBAAgB,wBAASC,KAAT,EAAgB;AAC9B,YAAMC,OAAOD,MAAME,YAAN,CAAmB,QAAnB,EAA6BC,KAA7B,CAAmC,CAAnC,CAAb;AACA,eAAOV,KAAKW,WAAL,CAAiBH,IAAjB,CAAP;AACD;AANoB,KAAhB,CAAP;AAQD,G;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAvEKP,I;AACJ,kBAAYJ,OAAZ,EAAqB;AAAA;;AACnB,WAAKe,SAAL,GAAiB,2BAAYf,OAAZ,CAAjB;AACA,WAAKG,IAAL,GAAY,EAAZ;AACD;;;;kCAEWQ,I,EAAM;AAChB,YAAI,CAAC,KAAKR,IAAL,CAAUQ,IAAV,CAAL,EAAsB;AACpB;AACA;AACA,eAAKK,YAAL,CAAkBL,IAAlB;AACD;;AAED,eAAO,KAAKR,IAAL,CAAUQ,IAAV,CAAP;AACD;;;mCAEYA,I,EAAM;AACjB,YAAMM,MAAM,4BAAaN,IAAb,EAAmB,KAAKI,SAAxB,CAAZ;AACA,YAAI,CAACE,GAAL,EAAU;AACR;AACA;AACD;;AAED,aAAKd,IAAL,CAAUc,IAAIN,IAAd,IAAsB,wBAAc,EAACX,SAASiB,GAAV,EAAd,CAAtB;AACD;;;2CAEoBlB,Q,EAAU;AAC7B;AACA;AACA,eAAOA,SAASmB,MAAT,CAAgB,UAASC,OAAT,EAAkB;AACvC,cAAMC,WAAWD,QAAQC,QAAR,CAAiBC,WAAjB,EAAjB;AACA,cAAID,aAAa,MAAjB,EAAyB;AACvB,mBAAO,IAAP;AACD;;AAED,cAAMH,MAAME,QAAQG,UAApB;AACA,cAAI,CAAC,KAAKnB,IAAL,CAAUc,IAAIN,IAAd,CAAL,EAA0B;AACxB,iBAAKR,IAAL,CAAUc,IAAIN,IAAd,IAAsB,EAAtB;AACD;;AAED,eAAKR,IAAL,CAAUc,IAAIN,IAAd,EAAoBY,IAApB,CAAyBJ,OAAzB;AACA,iBAAO,KAAP;AACD,SAbM,EAaJ,IAbI,CAAP;AAcD","file":"tabsequence.sort-area.js","sourcesContent":["\r\n// move <area> elements to the location of the <img> elements that reference them\r\n\r\nimport queryTabbable from './tabbable';\r\nimport mergeInDomOrder from '../util/merge-dom-order';\r\nimport getDocument from '../util/get-document';\r\nimport {getMapByName} from '../util/image-map';\r\n\r\nclass Maps {\r\n  constructor(context) {\r\n    this._document = getDocument(context);\r\n    this.maps = {};\r\n  }\r\n\r\n  getAreasFor(name) {\r\n    if (!this.maps[name]) {\r\n      // the map is not defined within the context, so we\r\n      // have to go find it elsewhere in the document\r\n      this.addMapByName(name);\r\n    }\r\n\r\n    return this.maps[name];\r\n  }\r\n\r\n  addMapByName(name) {\r\n    const map = getMapByName(name, this._document);\r\n    if (!map) {\r\n      // if there is no map, the img[usemap] wasn't doing anything anyway\r\n      return;\r\n    }\r\n\r\n    this.maps[map.name] = queryTabbable({context: map});\r\n  }\r\n\r\n  extractAreasFromList(elements) {\r\n    // remove all <area> elements from the elements list,\r\n    // but put them the map for later retrieval\r\n    return elements.filter(function(element) {\r\n      const nodeName = element.nodeName.toLowerCase();\r\n      if (nodeName !== 'area') {\r\n        return true;\r\n      }\r\n\r\n      const map = element.parentNode;\r\n      if (!this.maps[map.name]) {\r\n        this.maps[map.name] = [];\r\n      }\r\n\r\n      this.maps[map.name].push(element);\r\n      return false;\r\n    }, this);\r\n  }\r\n}\r\n\r\nexport default function(elements, context) {\r\n  // images - unless they are focusable themselves, likely not\r\n  // part of the elements list, so we'll have to find them and\r\n  // sort them into the elements list manually\r\n  const usemaps = context.querySelectorAll('img[usemap]');\r\n  const maps = new Maps(context);\r\n\r\n  // remove all <area> elements from the elements list,\r\n  // but put them the map for later retrieval\r\n  const _elements = maps.extractAreasFromList(elements);\r\n\r\n  if (!usemaps.length) {\r\n    // the context does not contain any <area>s so no need\r\n    // to replace anything, just remove any maps\r\n    return _elements;\r\n  }\r\n\r\n  return mergeInDomOrder({\r\n    list: _elements,\r\n    elements: usemaps,\r\n    resolveElement: function(image) {\r\n      const name = image.getAttribute('usemap').slice(1);\r\n      return maps.getAreasFor(name);\r\n    },\r\n  });\r\n}\r\n"]}