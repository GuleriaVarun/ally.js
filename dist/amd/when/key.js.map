{"version":3,"sources":["../../src/when/key.js"],"names":["map","bindings","context","document","documentElement","filter","mapKeys","Object","keys","length","TypeError","registerBinding","event","keyCodes","forEach","code","push","text","addCallback","callback","handleKeyDown","defaultPrevented","isParentOfElement","element","target","includeSelf","some","key","keyCode","which","_event","matchModifiers","call","disengage","addEventListener","removeEventListener"],"mappings":";;;;;;;;;;;;;;;;;;;oBAQe,YAAmB;AAAA,QAAVA,GAAU,uEAAJ,EAAI;;AAChC,QAAMC,WAAW,EAAjB;;AAEA,QAAMC,UAAU,yBAAUF,IAAIE,OAAd,EAAuB,CAAvB,KAA6BC,SAASC,eAAtD;AACA,WAAOJ,IAAIE,OAAX;AACA,QAAMG,SAAS,yBAAUL,IAAIK,MAAd,CAAf;AACA,WAAOL,IAAIK,MAAX;;AAEA,QAAMC,UAAUC,OAAOC,IAAP,CAAYR,GAAZ,CAAhB;AACA,QAAI,CAACM,QAAQG,MAAb,EAAqB;AACnB,YAAM,IAAIC,SAAJ,CAAc,2CAAd,CAAN;AACD;;AAED,QAAMC,kBAAkB,SAAlBA,eAAkB,CAASC,KAAT,EAAgB;AACtCA,YAAMC,QAAN,CAAeC,OAAf,CAAuB,UAASC,IAAT,EAAe;AACpC,YAAI,CAACd,SAASc,IAAT,CAAL,EAAqB;AACnBd,mBAASc,IAAT,IAAiB,EAAjB;AACD;;AAEDd,iBAASc,IAAT,EAAeC,IAAf,CAAoBJ,KAApB;AACD,OAND;AAOD,KARD;;AAUAN,YAAQQ,OAAR,CAAgB,UAASG,IAAT,EAAe;AAC7B,UAAI,OAAOjB,IAAIiB,IAAJ,CAAP,KAAqB,UAAzB,EAAqC;AACnC,cAAM,IAAIP,SAAJ,CAAc,+BAA+BO,IAA/B,GAAsC,qBAApD,CAAN;AACD;;AAED,UAAMC,cAAc,SAAdA,WAAc,CAASN,KAAT,EAAgB;AAClCA,cAAMO,QAAN,GAAiBnB,IAAIiB,IAAJ,CAAjB;AACA,eAAOL,KAAP;AACD,OAHD;;AAKA,yBAAWK,IAAX,EACGjB,GADH,CACOkB,WADP,EAEGJ,OAFH,CAEWH,eAFX;AAGD,KAbD;;AAeA,QAAMS,gBAAgB,SAAhBA,aAAgB,CAASR,KAAT,EAAgB;AACpC,UAAIA,MAAMS,gBAAV,EAA4B;AAC1B;AACD;;AAED,UAAIhB,OAAOI,MAAX,EAAmB;AACjB;AACA,YAAMa,oBAAoB,0CAAoB,EAACC,SAASX,MAAMY,MAAhB,EAAwBC,aAAa,IAArC,EAApB,CAA1B;AACA,YAAIpB,OAAOqB,IAAP,CAAYJ,iBAAZ,CAAJ,EAAoC;AAClC;AACD;AACF;;AAED,UAAMK,MAAMf,MAAMgB,OAAN,IAAiBhB,MAAMiB,KAAnC;AACA,UAAI,CAAC5B,SAAS0B,GAAT,CAAL,EAAoB;AAClB;AACD;;AAED1B,eAAS0B,GAAT,EAAcb,OAAd,CAAsB,UAASgB,MAAT,EAAiB;AACrC,YAAI,CAACA,OAAOC,cAAP,CAAsBnB,KAAtB,CAAL,EAAmC;AACjC;AACD;;AAEDkB,eAAOX,QAAP,CAAgBa,IAAhB,CAAqB9B,OAArB,EAA8BU,KAA9B,EAAqCqB,SAArC;AACD,OAND;AAOD,KAzBD;;AA2BA/B,YAAQgC,gBAAR,CAAyB,SAAzB,EAAoCd,aAApC,EAAmD,KAAnD;;AAEA,QAAMa,YAAY,SAAZA,SAAY,GAAW;AAC3B/B,cAAQiC,mBAAR,CAA4B,SAA5B,EAAuCf,aAAvC,EAAsD,KAAtD;AACD,KAFD;;AAIA,WAAO,EAAEa,oBAAF,EAAP;AACD,G","file":"key.js","sourcesContent":["\r\nimport keyBinding from './key.binding';\r\nimport nodeArray from '../util/node-array';\r\nimport {getParentComparator} from '../util/compare-position';\r\n\r\n// Bug 286933 - Key events in the autocomplete popup should be hidden from page scripts\r\n// @browser-issue Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=286933\r\n\r\nexport default function(map = {}) {\r\n  const bindings = {};\r\n\r\n  const context = nodeArray(map.context)[0] || document.documentElement;\r\n  delete map.context;\r\n  const filter = nodeArray(map.filter);\r\n  delete map.filter;\r\n\r\n  const mapKeys = Object.keys(map);\r\n  if (!mapKeys.length) {\r\n    throw new TypeError('when/key requires at least one option key');\r\n  }\r\n\r\n  const registerBinding = function(event) {\r\n    event.keyCodes.forEach(function(code) {\r\n      if (!bindings[code]) {\r\n        bindings[code] = [];\r\n      }\r\n\r\n      bindings[code].push(event);\r\n    });\r\n  };\r\n\r\n  mapKeys.forEach(function(text) {\r\n    if (typeof map[text] !== 'function') {\r\n      throw new TypeError('when/key requires option[\"' + text + '\"] to be a function');\r\n    }\r\n\r\n    const addCallback = function(event) {\r\n      event.callback = map[text];\r\n      return event;\r\n    };\r\n\r\n    keyBinding(text)\r\n      .map(addCallback)\r\n      .forEach(registerBinding);\r\n  });\r\n\r\n  const handleKeyDown = function(event) {\r\n    if (event.defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (filter.length) {\r\n      // ignore elements within the exempted sub-trees\r\n      const isParentOfElement = getParentComparator({element: event.target, includeSelf: true});\r\n      if (filter.some(isParentOfElement)) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    const key = event.keyCode || event.which;\r\n    if (!bindings[key]) {\r\n      return;\r\n    }\r\n\r\n    bindings[key].forEach(function(_event) {\r\n      if (!_event.matchModifiers(event)) {\r\n        return;\r\n      }\r\n\r\n      _event.callback.call(context, event, disengage);\r\n    });\r\n  };\r\n\r\n  context.addEventListener('keydown', handleKeyDown, false);\r\n\r\n  const disengage = function() {\r\n    context.removeEventListener('keydown', handleKeyDown, false);\r\n  };\r\n\r\n  return { disengage };\r\n}\r\n"]}