{"version":3,"sources":["../../src/when/key.binding.js"],"names":["text","split","map","_text","tokens","_modifiers","resolveModifiers","slice","_keyCodes","resolveKey","keyCodes","modifiers","matchModifiers","bind","modifier","alt","ctrl","meta","shift","modifierSequence","Object","keys","name","createExpectedModifiers","ignoreModifiers","value","altKey","ctrlKey","metaKey","shiftKey","indexOf","expected","forEach","token","operator","propertyName","TypeError","key","code","keycode","parseInt","isNaN","concat","_alias","event","some","prop","Boolean"],"mappings":"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","file":"key.binding.js","sourcesContent":["\r\n/*\r\n  decodes a key binding token to a JavaScript structure\r\n\r\n  returns an array of objects:\r\n    {\r\n      // key name translated to keyCode (possibly more than one)\r\n      keyCodes: [<number>],\r\n      // translated modifiers\r\n      modifiers: {\r\n        altKey: null,   // ignore\r\n        ctrKey: false,  // expect not pressed\r\n        metaKey: true,  // expect pressed\r\n        shiftKey: true, // expect pressed\r\n      },\r\n      // callback that returns true if event's\r\n      // modifier keys match the expected state\r\n      matchModifiers: function(event){},\r\n    }\r\n*/\r\n\r\nimport keycode from '../map/keycode';\r\n\r\nconst modifier = {\r\n  alt: 'altKey',\r\n  ctrl: 'ctrlKey',\r\n  meta: 'metaKey',\r\n  shift: 'shiftKey',\r\n};\r\n\r\nconst modifierSequence = Object.keys(modifier).map(name => modifier[name]);\r\n\r\nfunction createExpectedModifiers(ignoreModifiers) {\r\n  const value = ignoreModifiers ? null : false;\r\n  return {\r\n    altKey: value,\r\n    ctrlKey: value,\r\n    metaKey: value,\r\n    shiftKey: value,\r\n  };\r\n}\r\n\r\nfunction resolveModifiers(modifiers) {\r\n  const ignoreModifiers = modifiers.indexOf('*') !== -1;\r\n  const expected = createExpectedModifiers(ignoreModifiers);\r\n\r\n  modifiers.forEach(function(token) {\r\n    if (token === '*') {\r\n      // we've already covered the all-in operator\r\n      return;\r\n    }\r\n\r\n    // we want the modifier pressed\r\n    let value = true;\r\n    const operator = token.slice(0, 1);\r\n    if (operator === '?') {\r\n      // we don't care if the modifier is pressed\r\n      value = null;\r\n    } else if (operator === '!') {\r\n      // we do not want the modifier pressed\r\n      value = false;\r\n    }\r\n\r\n    if (value !== true) {\r\n      // compensate for the modifier's operator\r\n      token = token.slice(1);\r\n    }\r\n\r\n    const propertyName = modifier[token];\r\n    if (!propertyName) {\r\n      throw new TypeError('Unknown modifier \"' + token + '\"');\r\n    }\r\n\r\n    expected[propertyName] = value;\r\n  });\r\n\r\n  return expected;\r\n}\r\n\r\nfunction resolveKey(key) {\r\n  const code = keycode[key] || parseInt(key, 10);\r\n  if (!code || typeof code !== 'number' || isNaN(code)) {\r\n    throw new TypeError('Unknown key \"' + key + '\"');\r\n  }\r\n\r\n  return [code].concat(keycode._alias[code] || []);\r\n}\r\n\r\nfunction matchModifiers(expected, event) {\r\n  // returns true on match\r\n  return !modifierSequence.some(function(prop) {\r\n    // returns true on mismatch\r\n    return typeof expected[prop] === 'boolean' && Boolean(event[prop]) !== expected[prop];\r\n  });\r\n}\r\n\r\nexport default function(text) {\r\n  return text.split(/\\s+/).map(function(_text) {\r\n    const tokens = _text.split('+');\r\n    const _modifiers = resolveModifiers(tokens.slice(0, -1));\r\n    const _keyCodes = resolveKey(tokens.slice(-1));\r\n    return {\r\n      keyCodes: _keyCodes,\r\n      modifiers: _modifiers,\r\n      matchModifiers: matchModifiers.bind(null, _modifiers),\r\n    };\r\n  });\r\n}\r\n"]}