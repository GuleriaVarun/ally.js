{"version":3,"sources":["../../src/maintain/disabled.js"],"names":["context","filter","service","InertSubtree","disengage","makeElementInert","element","undoElementInert","observerConfig","attributes","childList","subtree","attributeFilter","_context","document","documentElement","_filter","_inertElementCache","bind","handleMutation","renderInert","filterElements","filterParentElements","focusable","includeContext","strategy","shadowObserver","config","callback","mutations","forEach","list","map","reduce","previous","current","concat","elements","makeInert","push","isParentOfElement","includeSelf","some","parent","mutation","type","addedElements","addedNodes","nodeType","Node","ELEMENT_NODE","length","addedFocusableElements","listQueryFocusable","target"],"mappings":"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","file":"disabled.js","sourcesContent":["\r\n/*\r\n  Utility to make a sub-tree of the DOM inert. Inert means the elements cannot be interacted\r\n  with and they cannot be focused via script, pointer or keyboard.\r\n\r\n  inert attribute was [removed](https://html5.org/r/8536) [tweet by steve](https://twitter.com/stevefaulkner/status/443075900201259008)\r\n  but definition of [inert subtrees](https://www.w3.org/html/wg/drafts/html/master/editing.html#inert-subtrees) remains.\r\n\r\n  [implementation idea by Vasilis](https://codepen.io/vasilisvg/pen/scowI)\r\n  [inert attribute polyfill by GoogleChrome](https://github.com/GoogleChrome/inert-polyfill)\r\n\r\n  [Gecko Bug: Inert Attribute](https://bugzilla.mozilla.org/show_bug.cgi?id=921504)\r\n  [Chromium Bug: Inert Attribute](https://code.google.com/p/chromium/issues/detail?id=269846)\r\n  [Chromium Bug: Inert Subtree](https://code.google.com/p/chromium/issues/detail?id=241699)\r\n  [WebKit Bug: Inert Subtree](https://bugs.webkit.org/show_bug.cgi?id=110952)\r\n*/\r\n\r\nimport nodeArray from '../util/node-array';\r\nimport queryFocusable from '../query/focusable';\r\nimport elementDisabled from '../element/disabled';\r\nimport observeShadowMutations from '../observe/shadow-mutations';\r\nimport {getParentComparator} from '../util/compare-position';\r\n\r\nfunction makeElementInert(element) {\r\n  return elementDisabled(element, true);\r\n}\r\n\r\nfunction undoElementInert(element) {\r\n  return elementDisabled(element, false);\r\n}\r\n\r\nconst observerConfig = {\r\n  attributes: true,\r\n  childList: true,\r\n  subtree: true,\r\n  attributeFilter: ['tabindex', 'disabled', 'data-ally-disabled'],\r\n};\r\n\r\nclass InertSubtree {\r\n  constructor({context, filter} = {}) {\r\n    this._context = nodeArray(context || document.documentElement)[0];\r\n    this._filter = nodeArray(filter);\r\n    this._inertElementCache = [];\r\n\r\n    this.disengage = this.disengage.bind(this);\r\n    this.handleMutation = this.handleMutation.bind(this);\r\n    this.renderInert = this.renderInert.bind(this);\r\n    this.filterElements = this.filterElements.bind(this);\r\n    this.filterParentElements = this.filterParentElements.bind(this);\r\n\r\n    const focusable = queryFocusable({\r\n      context: this._context,\r\n      includeContext: true,\r\n      strategy: 'all',\r\n    });\r\n\r\n    this.renderInert(focusable);\r\n\r\n    this.shadowObserver = observeShadowMutations({\r\n      context: this._context,\r\n      config: observerConfig,\r\n      callback: mutations => mutations.forEach(this.handleMutation),\r\n    });\r\n  }\r\n\r\n  disengage() {\r\n    if (!this._context) {\r\n      return;\r\n    }\r\n\r\n    undoElementInert(this._context);\r\n    this._inertElementCache.forEach((element) => undoElementInert(element));\r\n\r\n    this._inertElementCache = null;\r\n    this._filter = null;\r\n    this._context = null;\r\n    this.shadowObserver && this.shadowObserver.disengage();\r\n    this.shadowObserver = null;\r\n  }\r\n\r\n  listQueryFocusable(list) {\r\n    return list\r\n      // find all focusable elements within the given contexts\r\n      .map(element => queryFocusable({context: element, includeContext: true, strategy: 'all'}))\r\n      // flatten nested arrays\r\n      .reduce((previous, current) => previous.concat(current), []);\r\n  }\r\n\r\n  renderInert(elements) {\r\n    const makeInert = (element) => {\r\n      this._inertElementCache.push(element);\r\n      makeElementInert(element);\r\n    };\r\n\r\n    elements\r\n      .filter(this.filterElements)\r\n      .filter(this.filterParentElements)\r\n      // ignore elements that already are disabled\r\n      // so we don't enable them on disengage()\r\n      .filter(element => !elementDisabled(element))\r\n      .forEach(makeInert);\r\n  }\r\n\r\n  filterElements(element) {\r\n    // ignore elements within the exempted sub-trees\r\n    const isParentOfElement = getParentComparator({element, includeSelf: true});\r\n    return !this._filter.some(isParentOfElement);\r\n  }\r\n\r\n  filterParentElements(element) {\r\n    // ignore ancestors of the exempted sub-trees\r\n    const isParentOfElement = getParentComparator({parent: element});\r\n    return !this._filter.some(isParentOfElement);\r\n  }\r\n\r\n  handleMutation(mutation) {\r\n    if (mutation.type === 'childList') {\r\n      const addedElements = nodeArray(mutation.addedNodes).filter(element => element.nodeType === Node.ELEMENT_NODE);\r\n      if (!addedElements.length) {\r\n        return;\r\n      }\r\n\r\n      const addedFocusableElements = this.listQueryFocusable(addedElements);\r\n      this.renderInert(addedFocusableElements);\r\n    } else if (mutation.type === 'attributes') {\r\n      this.renderInert([mutation.target]);\r\n    }\r\n  }\r\n}\r\n\r\nexport default function({context, filter} = {}) {\r\n  const service = new InertSubtree({context, filter});\r\n  return { disengage: service.disengage };\r\n}\r\n"]}