{"version":3,"sources":["../../src/query/first-tabbable.js"],"names":["context","sequence","strategy","ignoreAutofocus","defaultToContext","includeOnlyTabbable","index","document","body","length","hasAutofocus","hasNoPositiveTabindex","_isFocusable","isFocusable","rules","except","onlyTabbable","element","hasAttribute","tabIndex"],"mappings":";;;;;;kBA0Be,YAOP;AAAA,iFAAJ,EAAI;AAAA,MANNA,OAMM,QANNA,OAMM;AAAA,MALNC,QAKM,QALNA,QAKM;AAAA,MAJNC,QAIM,QAJNA,QAIM;AAAA,MAHNC,eAGM,QAHNA,eAGM;AAAA,MAFNC,gBAEM,QAFNA,gBAEM;AAAA,MADNC,mBACM,QADNA,mBACM;;AACN,MAAIC,QAAQ,CAAC,CAAb;;AAEA,MAAI,CAACL,QAAL,EAAe;AACbD,cAAU,yBAAUA,WAAWO,SAASC,IAA9B,EAAoC,CAApC,CAAV;AACAP,eAAW,wBAAc;AACvBD,sBADuB;AAEvBK,8CAFuB;AAGvBH;AAHuB,KAAd,CAAX;AAKD;;AAED,MAAID,SAASQ,MAAT,IAAmB,CAACN,eAAxB,EAAyC;AACvC;AACAG,YAAQ,8BAAUL,QAAV,EAAoBS,YAApB,CAAR;AACD;;AAED,MAAIT,SAASQ,MAAT,IAAmBH,UAAU,CAAC,CAAlC,EAAqC;AACnC;AACAA,YAAQ,8BAAUL,QAAV,EAAoBU,qBAApB,CAAR;AACD;;AAED,MAAMC,eAAeC,oBAAYC,KAAZ,CAAkBC,MAAlB,CAAyB;AAC5CC,kBAAcX;AAD8B,GAAzB,CAArB;;AAIA,MAAIC,UAAU,CAAC,CAAX,IAAgBF,gBAAhB,IAAoCJ,OAApC,IAA+CY,aAAaZ,OAAb,CAAnD,EAA0E;AACxE,WAAOA,OAAP;AACD;;AAED,SAAOC,SAASK,KAAT,KAAmB,IAA1B;AACD,C;;AApDD;;;;AACA;;;;AACA;;;;AACA;;;;;;AAdA;;;;;;;;;;;AAgBA,SAASI,YAAT,CAAsBO,OAAtB,EAA+B;AAC7B;AACA,SAAOA,QAAQC,YAAR,CAAqB,WAArB,CAAP;AACD;;AAED,SAASP,qBAAT,CAA+BM,OAA/B,EAAwC;AACtC,SAAOA,QAAQE,QAAR,IAAoB,CAA3B;AACD","file":"first-tabbable.js","sourcesContent":["\r\n/*\r\n    query/firstTabbable() finds the first suitable element to receive focus in the given context.\r\n    If an element has [autofocus] return that element, otherwise return the first element\r\n    in document order that does *not* have a positive tabIndex (e.g. as [tabindex=\"1\"]),\r\n    otherwise return the context itself, if it is focusable.\r\n\r\n    Note: Chrome's <dialog> will focus the first tabbable element, even if it has\r\n    [tabindex=\"1\"]. Since [tabindex=\"1\"] is considered\r\n    bad practice we'll ignore it until someone complains.\r\n */\r\n\r\nimport findIndex from '../util/array-find-index';\r\nimport queryTabbable from './tabbable';\r\nimport isFocusable from '../is/focusable';\r\nimport nodeArray from '../util/node-array';\r\n\r\nfunction hasAutofocus(element) {\r\n  // [autofocus] actually only works on form element, but who cares?\r\n  return element.hasAttribute('autofocus');\r\n}\r\n\r\nfunction hasNoPositiveTabindex(element) {\r\n  return element.tabIndex <= 0;\r\n}\r\n\r\nexport default function({\r\n  context,\r\n  sequence,\r\n  strategy,\r\n  ignoreAutofocus,\r\n  defaultToContext,\r\n  includeOnlyTabbable,\r\n} = {}) {\r\n  let index = -1;\r\n\r\n  if (!sequence) {\r\n    context = nodeArray(context || document.body)[0];\r\n    sequence = queryTabbable({\r\n      context,\r\n      includeOnlyTabbable,\r\n      strategy,\r\n    });\r\n  }\r\n\r\n  if (sequence.length && !ignoreAutofocus) {\r\n    // prefer [autofocus]\r\n    index = findIndex(sequence, hasAutofocus);\r\n  }\r\n\r\n  if (sequence.length && index === -1) {\r\n    // ignore positive [tabindex]\r\n    index = findIndex(sequence, hasNoPositiveTabindex);\r\n  }\r\n\r\n  const _isFocusable = isFocusable.rules.except({\r\n    onlyTabbable: includeOnlyTabbable,\r\n  });\r\n\r\n  if (index === -1 && defaultToContext && context && _isFocusable(context)) {\r\n    return context;\r\n  }\r\n\r\n  return sequence[index] || null;\r\n}\r\n"]}